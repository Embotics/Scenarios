{
  "id": "",
  "guid": "",
  "name": "APM - Delete All Monitors",
  "description": null,
  "type": "COMPONENT_COMPLETION",
  "change_description": null,
  "target_type": null,
  "input_variables": [
    {
      "name": "Application Manager Key",
      "variable": "apmkey",
      "description": "API Key from Manage Engine, Application Manager",
      "required": true,
      "default_value": "XXXXXXXXXXXXXXXXXXXXXXXX"
    },
    {
      "name": "Application Manager URL",
      "variable": "apmurl",
      "description": null,
      "required": true,
      "default_value": "http://XXX.XXX.XXX.XXX:9090"
    }
  ],
  "info_messages": [],
  "system_version": "8.4.0 (1007090074)",
  "steps": [
    {
      "name": "Delete All APM Monitors for Host",
      "type": "EMBEDDED_SCRIPT",
      "condition": null,
      "data": {
        "credentials": null,
        "failure_action": "FAIL_STEP",
        "script_contents": "#Created on Commander 8.4\n$DisplayName = \"#{target.deployedName}\" \n$Hostname = \"#{target.dnsName}\" \n$apmkey = \"#{inputVariable['apmkey']}\"\n$apmurl = \"#{inputVariable['apmurl']}\"\n\n#Check All Variables Present\nif(!($DisplayName) -or !($Hostname) -or !($apmkey) -or !($apmurl)){\n        Write-error \"Please provide all required input variables to execute this workflow\"\n        Exit 1} \n        \n#Get Monitor Data from APM\n    Try{\n        $MonitorURL = $apmurl+\"/AppManager/json/ListMonitor?apikey=$apmkey&type=all\"\n        $Monitorresponse = Invoke-WebRequest -Uri $MonitorURL -Method GET\n        $StatusCode = $Hostresponse.StatusCode\n        if($StatusCode = \"200\"){\n            Write-host \"Get Hostname successful\" -ForegroundColor Green\n            }\n        if($StatusCode -ne \"200\"){\n            Write-Error \"Something went Wrong\"\n            Exit 1\n            }\n        $Monitors = @()\n        [object]$responseContent = (ConvertFrom-Json $Monitorresponse.Content).response.result\n        $Monitors = $responseContent  | Where-Object {$_.\"DISPLAYNAME\" -like  \"$DisplayName\"+\"*\"} | Select-Object -ExpandProperty \"RESOURCEID\"\n        $AllResourceIDs = ($Monitors | sort -Unique) -join \",\" \n        Write-Host \"$Hostname has these Monitors - $AllResourceIDs\" -ForegroundColor Green\n        }\n        Catch{\n                write-host \"Caught an exception:\" -ForegroundColor Red\n                write-host \"Exception Type: $($_.Exception.GetType().FullName)\" -ForegroundColor Red\n                write-host \"Exception Message: $($_.Exception.Message)\" -ForegroundColor Red\n                $error[0] | Format-List -Force\n                Exit 1\n                } \n            \n#Delete Resource Object in APM\n    Try{\n        ForEach($ID in $AllResourceIDs){\n            $StatusCode = \"\"\n            Write-host \"Trying to Remove Monitor - $ID\" -ForegroundColor Green\n            $DeleteURL = $apmurl+\"/AppManager/json/DeleteMonitor?apikey=$apmkey&resourceid=$ID\"\n            $response = Invoke-WebRequest -Uri $DeleteURL -Method POST\n            $StatusCode = $response.StatusCode\n            if($StatusCode = \"200\"){\n                Write-host \"Monitor $ID Deleted successfully\" -ForegroundColor Green\n                }\n            if($StatusCode -ne \"200\"){\n                Write-Error \"Something went Wrong Deleting ID - $ID\"\n                Exit 1\n                }\n            }\n        }\n        Catch{\n                write-host \"Caught an exception:\" -ForegroundColor Red\n                write-host \"Exception Type: $($_.Exception.GetType().FullName)\" -ForegroundColor Red\n                write-host \"Exception Message: $($_.Exception.Message)\" -ForegroundColor Red\n                $error[0] | Format-List -Force\n                Exit 1\n                } \n \n\n       ",
        "script_arguments": "",
        "timeout": 300,
        "executable": "powershell.exe",
        "capture_output": true
      }
    }
  ]
}
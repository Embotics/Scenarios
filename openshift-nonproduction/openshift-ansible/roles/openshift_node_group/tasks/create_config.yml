---
- name: fetch node configmap
  oc_configmap:
    name: "{{ openshift_node_group_name }}"
    namespace: "{{ openshift_node_group_namespace }}"
    state: list
  register: configout
  run_once: true

- name: debug node config
  debug:
    var: configout
  run_once: true

- when:
  - configout.results.results.0 == {} or (configout.results.results.0 != {} and (openshift_node_group_edits|length > 0 or openshift_node_group_labels|length > 0))
  block:
  - name: create a temp dir for this work
    command: mktemp -d /tmp/openshift_node_config-XXXXXX
    register: mktempout
    run_once: true

  - name: create node config template
    template:
      src: node-config.yaml.j2
      dest: "{{ mktempout.stdout }}/node-config.yaml"
    when:
    - configout.results.results.0 == {}
    run_once: true

  - name: lay down the config from the existing configmap
    copy:
      content: "{{ configout.results.results.0.data['node-config.yaml'] }}"
      dest: "{{ mktempout.stdout }}/node-config.yaml"
    when:
    - configout.results.results.0 != {}
    run_once: true

  - name: "specialize the generated configs for {{ openshift_node_group_name }}"
    yedit:
      content:
      src: "{{ mktempout.stdout }}/node-config.yaml"
      edits: "{{ openshift_node_group_edits | union(openshift_node_labels_edit) }}"
    register: yeditout
    run_once: true

  - name: show the yeditout debug var
    debug:
      var: yeditout
    run_once: true

  - name: create volume config template
    template:
      src: volume-config.yaml.j2
      dest: "{{ mktempout.stdout }}/volume-config.yaml"
    when:
    - "'data' not in configout['results']['results'][0] or 'volume-config.yaml' not in configout['results']['results'][0]['data']"
    - openshift_node_group_name != ""
    - openshift_node_local_quota_per_fsgroup is defined
    - openshift_node_local_quota_per_fsgroup != ""
    run_once: true

  - name: lay down the volume config from the existing configmap
    copy:
      content: "{{ configout.results.results.0.data['volume-config.yaml'] }}"
      dest: "{{ mktempout.stdout }}/volume-config.yaml"
    when:
    - "'data' in configout['results']['results'][0]"
    - "'volume-config.yaml' in configout['results']['results'][0]['data']"
    - openshift_node_group_name != ""
    - openshift_node_local_quota_per_fsgroup is defined
    - openshift_node_local_quota_per_fsgroup != ""
    run_once: true

  - name: "specialize the volume config for {{ openshift_node_group_name }}"
    yedit:
      content:
      src: "{{ mktempout.stdout }}/volume-config.yaml"
      key: localQuota.perFSGroup
      value: "{{ openshift_node_local_quota_per_fsgroup }}"
    register: volume_yeditout
    when:
    - openshift_node_local_quota_per_fsgroup is defined
    - openshift_node_local_quota_per_fsgroup != ""
    run_once: true

  - name: show the volume_yeditout debug var
    debug:
      var: volume_yeditout
    run_once: true

  - name: create node-config.yaml configmap
    oc_configmap:
      name: "{{ openshift_node_group_name }}"
      namespace: "{{ openshift_node_group_namespace }}"
      from_file:
        node-config.yaml: "{{ mktempout.stdout }}/node-config.yaml"
    when:
    - openshift_node_local_quota_per_fsgroup is undefined or openshift_node_local_quota_per_fsgroup == ""
    run_once: true

  - name: create node-config.yaml and volume-config.yaml configmap
    oc_configmap:
      name: "{{ openshift_node_group_name }}"
      namespace: "{{ openshift_node_group_namespace }}"
      from_file:
        node-config.yaml: "{{ mktempout.stdout }}/node-config.yaml"
        volume-config.yaml: "{{ mktempout.stdout }}/volume-config.yaml"
    when:
    - openshift_node_local_quota_per_fsgroup is defined and openshift_node_local_quota_per_fsgroup != ""
    run_once: true

  - name: remove templated files
    file:
      dest: "{{ mktempout.stdout }}/"
      state: absent
    run_once: true

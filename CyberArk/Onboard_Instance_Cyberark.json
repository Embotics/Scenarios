{
  "id": "",
  "guid": "",
  "name": "Onboard Instance into Cyberark",
  "description": "Create image reference in CyberArk for the Deployed VM to enable password rotation. ",
  "type": "COMPONENT_COMPLETION",
  "change_description": null,
  "target_type": null,
  "input_variables": [
    {
      "name": "Cyberark Instance",
      "variable": "cyberark_instance",
      "description": "DNS address of the Cyberark Server",
      "required": true,
      "default_value": "cyberark.instance.com"
    },
    {
      "name": "Platform ID",
      "variable": "platform_id",
      "description": "PlatformID for the account. note this must already exist in Cyberark or the request will fail. ",
      "required": true,
      "default_value": "UnixSSH"
    },
    {
      "name": "Safe Name",
      "variable": "safe_name",
      "description": "Name of the Safe that the account will be created in ",
      "required": true,
      "default_value": "Linux Accounts"
    },
    {
      "name": "Image Credential name",
      "variable": "image_credential",
      "description": "Image Credential from credential library which is used in the image to be rotated by Cyberark",
      "required": true,
      "default_value": "credential name"
    },
    {
      "name": "Commander base ULR",
      "variable": "commander_url",
      "description": "Base url for commander \"https://commander.com\"",
      "required": true,
      "default_value": null
    },
    {
      "name": "Cyberark AuthType",
      "variable": "cyberark_authtype",
      "description": "Auth type for the user account used for api calls to CyberArk,  supported types are: CyberArk, LDAP, RADIUS, Windows\n",
      "required": true,
      "default_value": "LDAP"
    }
  ],
  "info_messages": [],
  "system_version": "8.8.1 (1007130064)",
  "steps": [
    {
      "name": "Execute Cyberark account onboarding",
      "type": "EMBEDDED_SCRIPT",
      "condition": null,
      "data": {
        "credentials": null,
        "failure_action": "FAIL_STEP",
        "script_contents": " <# \nCyberArk instance Account onboarding, specifies credentials to be changed by CyberArk\nThe $Address variable can be change to IP address if required instead of DNS\n#> \n\n#Commander Base Configuration\n$BaseURL = \"#{inputVariable['commander_url']}\"\n$Commanderuser = (Get-Item Env:COMMANDER_CREDENTIALS_USERNAME).value;\n$Commanderpass = (Get-Item Env:COMMANDER_CREDENTIALS_PASSWORD).value;\n\n#Image Credential from credential library\n$imageCredName = \"#{inputVariable['image_credential']}\"\n\n#CyberArk Base Configuration\n$Instance = \"#{inputVariable['cyberark_instance']}\"\n$UserName = (Get-Item Env:SELECTED_CREDENTIALS_USERNAME).value;\n$Password = (Get-Item Env:SELECTED_CREDENTIALS_PASSWORD).value; \n$AuthType = \"#{inputVariable['cyberark_authtype']}\"\n\n#Cyberark New Account registration\n$address = \"#{target.ipAddressPrivate}\"\n$SafeName = \"#{inputVariable['safe_name']}\"\n$PlatformID = \"#{inputVariable['platform_id']}\"\n \n# {Yes:No} to bypass unsigned cert on the cyberark server. \n$BypassCert = \"Yes\" \n\n\n##########################################################################################\nif(!($Instance) -or !($UserName)-or !($AuthType) -or !($Password)  -or !($imageCredName)){\n        Write-error \"Please provide the required information for Cyberark\"\n        Exit 1\n        }\n\nif(!($BaseURL) -or !($Commanderuser) -or !($Commanderpass) -or !($BypassCert)){\n        Write-error \"Please provide Commander information\"\n        Exit 1\n        } \n\nif(!($SafeName) -or !($PlatformID) -or !($address)){\n        Write-error \"Please provide Cyberark account registration information\"\n        Exit 1\n        } \n\n\n #ignore Commander unsigned Certificate\nif ($BypassCert -eq \"Yes\"){\n    Write-host \"- Ignoring invalid Certificate\" -ForegroundColor Green\n\nadd-type @\"\n   using System.Net;\n    using System.Security.Cryptography.X509Certificates;\n    public class TrustAllCertsPolicy : ICertificatePolicy {\n        public bool CheckValidationResult(\n            ServicePoint srvPoint, X509Certificate certificate,\n            WebRequest request, int certificateProblem) {\n            return true;\n        }\n    }\n\"@\n    [System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n}\n\n#Get Commander Auth Token\n    $Token = $null\n    $TokenEndpoint = \"/rest/v3/tokens\"\n    $TokenURL = $BaseURL+$TokenEndpoint\n    $TokenBody = \"{\n                \"\"username\"\": \"\"$Commanderuser\"\",\n                \"\"password\"\": \"\"$Commanderpass\"\" \n                }\"\n    $TokenResult = Invoke-RestMethod -Method POST $TokenURL -Body $TokenBody -ContentType 'application/json'\n    $Token = $TokenResult.token\n    $AuthHeader = @{\"Authorization\"= \"Bearer $Token\"}\n\n#Get image Credential from Commander\n     Try{\n         $credurl = $BaseURL+\"/rest/v3/credentials/$imageCredName\"   \n         $cred = Invoke-RestMethod -Method GET $credurl -Headers $AuthHeader -ContentType 'application/json'\n         $creds = $cred.password_credential\n         $imageusername = $creds.username \n         $imagepassword = $creds.password\n        }\n         Catch{\n             $Exception = \"$_\"\n             Write-Error \"Failed to get credential named $domaincredname from credentials in commander.. Does it exist?\"\n             Write-Error $Exception\n             Exit 1   \n         }\n\n#set auth url and body based on auth type for Cyberark\n    If ($AuthType -eq \"LDAP\"){\n        $body = \"{`n `\"username`\": `\"$UserName`\",`n `\"password`\": `\"$Password`\",`n `\"concurrentSessions`\": `\"false`\"`n}\"\n        $TokenURL = \"https://$Instance/PasswordVault/API/auth/LDAP/Logon\"\n    }\n    Elseif($AuthType -eq \"CyberArk\"){\n        $body = \"{`n `\"username`\": `\"$UserName`\",`n `\"password`\": `\"$Password`\"`n}\"\n        $TokenURL = \"https://$Instance/PasswordVault/API/auth/CyberArk/Logon\"\n    }\n    Elseif($AuthType -eq \"RADIUS\"){\n        $body = \"{`n `\"Username`\": `\"$UserName`\",`n `\"Password`\": `\"$Password`\",`n `\"concurrentSessions`\": `\"true`\"`n}\"\n        $TokenURL = \"https://$Instance/PasswordVault/API/auth/radius/Logon\"\n    }\n    Elseif($AuthType -eq \"Windows\"){\n        $body = \"{`n `\"username`\": `\"$UserName`\",`n `\"password`\": `\"$Password`\",`n `\"concurrentSessions`\": `\"false`\"`n}\"\n        $TokenURL = \"https://$Instance/PasswordVault/API/auth/Windows/Logon\"\n    }\n    Else{Write-Error \"The Supported AuthTypes for CyberArk API are, CyberArk, LDAP, RADIUS, Windows.. Please enter a Valid Auth type\"\n    }\n\n# Invoke Call to get token\n    Try{\n        $response = Invoke-RestMethod $TokenURL -Method 'POST' -Headers $headers -Body $body -ContentType 'application/json'\n        $Token = $response\n        $AuthHeader = @{\"Authorization\"= $Token}\n        }\n        Catch{Write-host \"Failed to get Auth Token from Cyberark.\" -ForegroundColor Red\n            $Exception = \"$_\"\n            Write-Error $Exception\n            Exit 1\n        }\n\n#Get Account to see if it already exists in Cyberark.\n    Try{\n        $AccountlookupUrl =  \"https://$Instance/PasswordVault/api/Accounts?search=$Dnsname&searchType=contains\"\n        $Accountlookup = Invoke-RestMethod $AccountlookupUrl  -Method 'GET' -Headers $AuthHeader -ContentType 'application/json'\n        $Accountlookupresult = $Accountlookup.value\n        }\n        Catch{Write-host \"Failed to get Accounts from Cyberark.\" -ForegroundColor Red\n            $Exception = \"$_\"\n            Write-Error $Exception\n            Exit 1\n        }\n\n#Check and see if the new username is already in the safe\n    $ExAccount = $Accountlookupresult | where-object {($_.safename -eq $SafeName) -and ($_.username -eq $newusername) -and ($_.address -eq $address)}\n    if($ExAccount.count -ne 0){\n        write-host \"An account already exists in the safe $SafeName with a username of $username for $address\" -ForegroundColor Red\n        Exit 1\n        }\n\n#Add Account \n     $Body = @\"\n{\n \"name\": \"$address-$newusername\",\n \"address\": \"$address\",\n \"userName\": \"$imageusername\",\n \"platformId\": \"$PlatformID\",\n \"safeName\": \"$SafeName\",\n \"secretType\": \"password\",\n \"secret\": \"$imagepassword\",\n \"platformAccountProperties\": {\n },\n \"secretManagement\": {\n  \"automaticManagementEnabled\": true\n }\n}\n\"@\n    Try{\n    $AddAccounturl = \"https://$Instance/PasswordVault/api/Accounts\"\n    $AddAcctResult = Invoke-RestMethod -uri $AddAccounturl -Method 'POST' -Headers $AuthHeader -Body $body -ContentType 'application/json'\n    if($AddAcctResult.id -ne $null){\n        Write-host \"Account $address has been created sucessfully\" -ForegroundColor Green\n        Exit 0\n        }  \n        }Catch{\n            Write-host \"Failed to Create Account in Cyberark.\" -ForegroundColor Red\n            $Exception = \"$_\"\n            Write-Error $Exception\n            Exit 1\n        }\n \n \n\n \n",
        "script_arguments": "",
        "timeout": 300,
        "executable": "powershell.exe",
        "capture_output": true
      }
    }
  ]
}
